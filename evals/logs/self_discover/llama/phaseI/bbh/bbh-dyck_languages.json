{
    "selected_modules": "Based on the task examples provided, the following reasoning modules are crucial for solving tasks like them:\n\n1. Try creative thinking, generate innovative and out-of-the-box ideas to solve the problem. Explore unconventional solutions, thinking beyond traditional boundaries, and encouraging imagination and originality.\n2. Let's think step by step.\n3. Let's make a step by step plan and implement it with good notion and explanation.\n4. How can I break down this problem into smaller, more manageable parts?\n5. What is the core issue or problem that needs to be addressed?\n6. Critical Thinking: This style involves analyzing the problem from different perspectives, questioning assumptions, and evaluating the evidence or information available. It focuses on logical reasoning, evidence-based decision-making, and identifying potential biases or flaws in thinking.\n7. What kinds of solution typically are produced for this kind of problem specification?\n8. Given the problem specification and the current best solution, have a guess about other possible solutions.\n9. Let's imagine the current best solution is totally wrong, what other ways are there to think about the problem specification?\n10. What is the best way to modify this current best solution, given what you know about these kinds of problem specification?",
    "adapted_modules": "Here are the adapted reasoning module descriptions:\n\n1. Think creatively about bracket patterns, generate innovative and out-of-the-box ideas to solve the problem by considering different combinations of brackets and exploring unconventional solutions.\n\n2. Let's analyze the bracket sequence step by step, examining each bracket and its corresponding closing bracket to identify any patterns or irregularities.\n\n3. Create a step-by-step plan to identify and match opening and closing brackets, implementing it with a clear understanding of bracket hierarchy and nesting.\n\n4. How can I break down the bracket sequence into smaller, more manageable parts, such as identifying individual bracket pairs or groups?\n\n5. What is the core issue or problem with the bracket sequence that needs to be addressed, such as mismatched or missing brackets?\n\n6. Critical Thinking: Analyze the bracket sequence from different perspectives, questioning assumptions about bracket patterns and evaluating the evidence or information available to identify potential biases or flaws in thinking.\n\n7. What kinds of bracket sequences typically require closure, and what are common patterns or structures used to ensure proper closure?\n\n8. Given the current bracket sequence and the goal of proper closure, have a guess about other possible bracket combinations or patterns that could complete the sequence.\n\n9. Let's imagine the current bracket sequence is incorrect or incomplete; what other ways are there to think about the sequence, such as alternative bracket patterns or nesting structures?\n\n10. What is the best way to modify the current bracket sequence, given what you know about bracket patterns and closure requirements, to ensure proper closure and completion of the sequence?",
    "reasoning_structure": "Here is the operationalized reasoning plan in JSON format:\n\n```\n{\n    \"Analyze the input sequence\": {\n        \"Identify the opening brackets in the sequence\": [],\n        \"Identify the closing brackets in the sequence\": []\n    },\n    \"Create a stack to track the opening brackets\": {\n        \"Push each opening bracket onto the stack\": []\n    },\n    \"Match opening and closing brackets\": {\n        \"For each closing bracket in the sequence\": [\n            \"Check if the top of the stack contains the corresponding opening bracket\": [],\n            \"If it does, pop the opening bracket from the stack\": [],\n            \"If it doesn't, identify the mismatched or missing bracket\": []\n        ]\n    },\n    \"Complete the sequence\": {\n        \"While the stack is not empty\": [\n            \"Pop the top opening bracket from the stack\": [],\n            \"Add the corresponding closing bracket to the sequence\": []\n        ]\n    },\n    \"Verify the completed sequence\": {\n        \"Check if all brackets are properly matched and closed\": []\n    }\n}\n```",
    "reasoning": []
}